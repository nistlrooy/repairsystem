<?php

namespace App\RepairBundle\Entity;

use Doctrine\ORM\EntityRepository;


/**
 * RepairFormRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RepairFormRepository extends EntityRepository
{

    /**
     * 获取由$createrId用户创建且状态为为lower和upper之间的维修工单
     * @param $createrId 创建者Id
     * @param $conditionLower 状态下限
     * @param $conditionUpper 状态上限
     * @param $sort 排序字段
     * @param $direction 升序或降序
     * @return array|null
     *
     */
    public function getRepairFormByCreater($createrId,$conditionLower,$conditionUpper,$sort=null,$direction=null)
    {
        if(($sort == null)||($direction == null))
        {
            $query = $this->getEntityManager()->createQuery(
                'SELECT r FROM RepairBundle:RepairForm r
                JOIN r.repairTask t
                JOIN r.formCondition c
                JOIN t.user u
                JOIN r.faultInfo i
                JOIN  i.faultPriority p
                WHERE u.id = :createrId AND (c.id > :conditionLower and c.id < :conditionUpper)
                ORDER BY
                p.id DESC,
                c.id DESC,
                t.createTime DESC'
            )->setParameters(array('createrId'=>$createrId,'conditionLower'=>$conditionLower,'conditionUpper'=>$conditionUpper));
        }
        else
        {
            $query = $this->getEntityManager()->createQuery(
                'SELECT r FROM RepairBundle:RepairForm r
                JOIN r.repairTask t
                JOIN r.formCondition c
                JOIN t.user u
                JOIN r.faultInfo i
                JOIN i.group g
                JOIN  i.faultPriority p
                WHERE u.id = :createrId AND (c.id > :conditionLower and c.id < :conditionUpper)
                ORDER BY '.$sort.' '.$direction
            )->setParameters(array('createrId'=>$createrId,'conditionLower'=>$conditionLower,'conditionUpper'=>$conditionUpper));
        }



        try
        {
            return $query->getResult();
        }catch (\Doctrine\ORM\NoResultException $e){
            return null;
        }

    }

    /**
     * 获取由$receiverId用户接收的且状态为$conditionId的维修工单
     * @param $receiverId 接收工单者Id
     * @param $conditionId 状态Id
     * @param $sort 排序字段
     * @param $direction 升序或降序
     * @return array|null
     */
    public function getRepairFormByReceiver($receiverId,$conditionId,$sort=null,$direction=null)
    {
        if(($sort == null)||($direction == null))
        {
            $query = $this->getEntityManager()->createQuery(
                'SELECT r From RepairBundle:RepairForm r
                JOIN r.formCondition c
                JOIN r.receive u
                JOIN r.repairTask t
                JOIN r.faultInfo i
                JOIN  i.faultPriority p
                WHERE u.id = :receiverId AND c.id = :conditionId
                ORDER BY p.id DESC,
                 t.createTime DESC'
            )->setParameters(array('receiverId'=>$receiverId,'conditionId'=>$conditionId));
        }else{
            $query = $this->getEntityManager()->createQuery(
                'SELECT r From RepairBundle:RepairForm r
            JOIN r.formCondition c
            JOIN r.receive u
            JOIN r.repairTask t
            JOIN r.faultInfo i
            JOIN i.group g
            JOIN  i.faultPriority p
            WHERE u.id = :receiverId AND c.id = :conditionId
            ORDER BY '.$sort.' '.$direction
            )->setParameters(array('receiverId'=>$receiverId,'conditionId'=>$conditionId));
        }

        try{
            return $query->getResult();
        }catch (\Doctrine\ORM\NoResultException $e){
            return null;
        }
    }

    /**
     * 获取没有被接收的维修工单
     * @param $sort 排序字段
     * @param $direction 升序或降序
     * @return array|null
     */
    public function getRepairFormByNotReceived($sort=null,$direction=null)
    {
        if(($sort == null)||($direction == null))
        {
            $query = $this->getEntityManager()->createQuery(
                'SELECT r FROM RepairBundle:RepairForm r
            JOIN r.faultInfo i
            JOIN r.formCondition c
            JOIN  i.faultPriority p
            JOIN r.repairTask t
            WHERE r.receive is NULL AND c.id = 1
            ORDER BY p.id DESC,
             t.createTime DESC'
            );
        }else{
            $query = $this->getEntityManager()->createQuery(
                'SELECT r FROM RepairBundle:RepairForm r
            JOIN r.faultInfo i
            JOIN r.formCondition c
            JOIN  i.faultPriority p
            JOIN r.repairTask t
            JOIN i.group g
            WHERE r.receive is NULL AND c.id = 1
           ORDER BY '.$sort.' '.$direction
            );
        }

        try{
            return $query->getResult();
        }catch (\Doctrine\ORM\NoResultException $e){
            return null;
        }
    }

    /**
     * 获取维修工单记录
     * @param $createrId
     * @param $sort 排序字段
     * @param $direction 升序或降序
     * @return array|null
     *
     */
    public function getRepairFormByCreaterHistory($createrId,$sort=null,$direction=null)
    {
        if(($sort == null)||($direction == null))
        {
            $query = $this->getEntityManager()->createQuery(
                'SELECT r FROM RepairBundle:RepairForm r
            JOIN r.repairTask t
            JOIN r.formCondition c
            JOIN t.user u
            JOIN r.faultInfo i
            JOIN  i.faultPriority p
            WHERE u.id = :createrId
             ORDER BY p.id DESC,
             t.createTime DESC'
            )->setParameters(array('createrId'=>$createrId));
        }else
        {
            $query = $this->getEntityManager()->createQuery(
                'SELECT r FROM RepairBundle:RepairForm r
            JOIN r.repairTask t
            JOIN r.formCondition c
            JOIN t.user u
            JOIN r.faultInfo i
            JOIN i.group g
            JOIN  i.faultPriority p
            WHERE u.id = :createrId
            ORDER BY '.$sort.' '.$direction
            )->setParameters(array('createrId'=>$createrId));
        }

        try
        {
            return $query->getResult();
        }catch (\Doctrine\ORM\NoResultException $e){
            return null;
        }
    }

    /**
     * 获取由$receiverId用户接收的维修工单历史记录
     * @param $receiverId 接收工单者Id
     * @param $sort 排序字段
     * @param $direction 升序或降序
     * @return array|null
     */
    public function getRepairFormByReceiverHistory($receiverId,$sort=null,$direction=null)
    {
        if(($sort == null)||($direction == null))
        {
            $query = $this->getEntityManager()->createQuery(
                'SELECT r From RepairBundle:RepairForm r
            JOIN r.repairTask t
            JOIN r.formCondition c
            JOIN r.receive u
            JOIN r.faultInfo i
            JOIN  i.faultPriority p
            WHERE u.id = :receiverId
             ORDER BY p.id DESC,
             t.createTime DESC'
            )->setParameters(array('receiverId'=>$receiverId));
        }
        else{
            $query = $this->getEntityManager()->createQuery(
                'SELECT r From RepairBundle:RepairForm r
            JOIN r.repairTask t
            JOIN r.formCondition c
            JOIN r.receive u
            JOIN r.faultInfo i
            JOIN i.group g
            JOIN  i.faultPriority p
            WHERE u.id = :receiverId
            ORDER BY '.$sort.' '.$direction
            )->setParameters(array('receiverId'=>$receiverId));
        }

        try{
            return $query->getResult();
        }catch (\Doctrine\ORM\NoResultException $e){
            return null;
        }
    }


    /**
     * 获取需要领导批示的工单
     * @param $sort 排序字段
     * @param $direction 升序或降序
     * @return array|null
     */
    public function getRepairFormByNeedToOrder($sort=null,$direction=null)
    {
        if(($sort == null)||($direction == null))
        {
            $query = $this->getEntityManager()->createQuery(
                'SELECT r From RepairBundle:RepairForm r
                JOIN r.repairTask t
                JOIN r.faultInfo i
                JOIN  i.faultOrder o
                JOIN r.formCondition c
                JOIN  i.faultPriority p
                WHERE i.faultOrder IS NOT NULL AND o.user IS NULL AND c.id = 2
                ORDER BY p.id DESC,
                 t.createTime DESC');
        }
        else{
            $query = $this->getEntityManager()->createQuery(
                'SELECT r From RepairBundle:RepairForm r
                JOIN r.repairTask t
                JOIN r.faultInfo i
                JOIN  i.faultOrder o
                JOIN r.formCondition c
                JOIN  i.faultPriority p
                WHERE i.faultOrder IS NOT NULL AND o.user IS NULL AND c.id = 2
                ORDER BY '.$sort.' '.$direction
            );
        }

        try{
            return $query->getResult();
        }catch (\Doctrine\ORM\NoResultException $e){
            return null;
        }
    }


    /**
     * 获取每个类型工单数量统计
     * @param int $day 获取$day天前到今天的工单
     * @return array|null
     */
     public function getRepairFormNumberOfAllType($day = 1000)
    {
        $query = $this->getEntityManager()->createQuery(
            'select t from RepairBundle:FaultType t'
        );
        try{
            $typeResult = $query->getResult();
        }catch (\Doctrine\ORM\NoResultException $e){
            return null;
        }

        $today = new \DateTime('now');
        $limit = date_format(date_modify($today,'-'.$day.' day'), 'Y-m-d');

        $type = array();
        for($i=0;$i<count($typeResult);$i++)
        {
            $query = $this->getEntityManager()->createQuery(
                'select count(r) from RepairBundle:RepairForm r
                JOIN r.repairTask task
                JOIN r.faultInfo i
                JOIN i.faultType t
                WHERE t.name = :name AND task.createTime > :limit
                ')->setParameters(array('name'=>$typeResult[$i]->getname(),'limit'=>$limit));

            $type[$typeResult[$i]->getname()] = $query->getResult();
        }

        return $type;

    }

    /**
     * 获取工单所在地统计数据
     * @param int $day 获取$day天前到今天的工单
     * @return array|null
     */
    public function getRepairFormNumberOfAllGroup($day = 1000)
    {
        $query = $this->getEntityManager()->createQuery(
            'select g from UserBundle:Group g'
        );
        try{
            $Result = $query->getResult();
        }catch (\Doctrine\ORM\NoResultException $e){
            return null;
        }

        $date = new \DateTime('now');
        $limit = date_format(date_modify($date,'-'.$day.' day'), 'Y-m-d');

        $group = array();
        for($i=0;$i<count($Result);$i++)
        {
            $query = $this->getEntityManager()->createQuery(
                'select count(r) from RepairBundle:RepairForm r
                JOIN r.repairTask task
                JOIN r.faultInfo i
                JOIN i.group g
                WHERE g.name = :name AND task.createTime > :limit
                ')->setParameters(array('name'=>$Result[$i]->getname(),'limit'=>$limit));

            $group[$Result[$i]->getname()] = $query->getSingleScalarResult();
        }

        return $group;

    }

    /**获取近$month个月维修金额情况
     * @param int $month
     * @return array
     */
    public function getRepairFormCost($month = 6)
    {
        $upper = new \DateTime('now');
        $costInAll = array();
        for($int=0;$int<$month;$int++)
        {
            $upperFormat = $upper->format('Y-m-d H:i:s');
            $m = $upper->format('Y-m');

            if($int==0)
            {
                $days = $upper->format('d')-1;
                $upper->modify('-'.$days.' days');

            }
            else
            {
                $upper->modify('-1 month');
            }
            $lowerFormat = $upper->format('Y-m-d H:i:s');

            //获取上报故障数
            $query = $this->getEntityManager()->createQuery(
                'select r from RepairBundle:RepairForm r
                JOIN r.repairTask task
                WHERE task.createTime > :lower AND task.createTime< :upper
                ')->setParameters(array('lower'=>$lowerFormat,'upper'=>$upperFormat));

            $cost = 0;
            $result = $query->getResult();

            foreach($result as $arr)
            {
                $cost = $cost + $arr->getCost();
            }

            $costInAll[$m] = $upper;
        }
        return $costInAll;
    }


    /**获取近$month个月维修工单各状态情况
     * @param int $month
     * @return array
     */
    public function getRepairFormNumberOfAllStatus($month = 6)
    {
        $upper = new \DateTime('now');
        $repairForm = array();

        for($i=1;$i<=$month;$i++)
        {
            $upperFormat = $upper->format('Y-m-d H:i:s');
            $m = $upper->format('Y-m');
            if($i == 1)
            {
                $days = $upper->format('d');
                $upper->modify('-'.$days.'day');
            }else{
                $upper->modify('-1 month');
            }

            $lowerFormat = $upper->format('Y-m-d H:i:s');

            //获取上报故障数
            $query = $this->getEntityManager()->createQuery(
            'select count(r) from RepairBundle:RepairForm r
                JOIN r.repairTask task
                WHERE task.createTime > :lower AND task.createTime< :upper
                ')->setParameters(array('lower'=>$lowerFormat,'upper'=>$upperFormat));
            $number = array();
            $number['all'] = $query->getSingleScalarResult();
            //获取已维修数
            $query = $this->getEntityManager()->createQuery(
                'select count(r) from RepairBundle:RepairForm r
                JOIN r.repairTask task
                JOIN r.formCondition c
                WHERE task.createTime > :lower AND task.createTime< :upper AND c.id > 1
                ')->setParameters(array('lower'=>$lowerFormat,'upper'=>$upperFormat));

            $number['repair'] = $query->getSingleScalarResult();
            //获取已维修数
            $query = $this->getEntityManager()->createQuery(
                'select count(r) from RepairBundle:RepairForm r
                JOIN r.repairTask task
                JOIN r.formCondition c
                WHERE task.createTime > :lower AND task.createTime< :upper AND c.id > 3
                ')->setParameters(array('lower'=>$lowerFormat,'upper'=>$upperFormat));

            $number['done'] = $query->getSingleScalarResult();


            $repairForm[$m] = $number;
            

        }
        return $repairForm;
    }

}
